// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 8.0.10
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace DialogFramework.Domain
{
    public abstract partial class DialogPart : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;

        private ExpressionFramework.Domain.Evaluatable? _condition;

        private string _title;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Id
        {
            get
            {
                return _id;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.String>.Default.Equals(_id, value);
                _id = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Id));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Evaluatable? Condition
        {
            get
            {
                return _condition;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<ExpressionFramework.Domain.Evaluatable>.Default.Equals(_condition, value);
                _condition = value;
                if (hasChanged) HandlePropertyChanged(nameof(Condition));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Title
        {
            get
            {
                return _title;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.String>.Default.Equals(_title, value);
                _title = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Title));
            }
        }

        protected DialogPart(string id, ExpressionFramework.Domain.Evaluatable? condition, string title)
        {
            if (id is null) throw new System.ArgumentNullException(nameof(id));
            if (title is null) throw new System.ArgumentNullException(nameof(title));
            this._id = id;
            this._condition = condition;
            this._title = title;
        }

        public abstract DialogFramework.Domain.Builders.DialogPartBuilder ToBuilder();

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public abstract partial class DialogPartResult : System.ComponentModel.INotifyPropertyChanged
    {
        private string _partId;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string PartId
        {
            get
            {
                return _partId;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.String>.Default.Equals(_partId, value);
                _partId = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(PartId));
            }
        }

        protected DialogPartResult(string partId)
        {
            if (partId is null) throw new System.ArgumentNullException(nameof(partId));
            this._partId = partId;
        }

        public abstract DialogFramework.Domain.Builders.DialogPartResultBuilder ToBuilder();

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public abstract partial class ValidationRule : System.ComponentModel.INotifyPropertyChanged
    {
        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected ValidationRule()
        {
        }

        public abstract DialogFramework.Domain.Builders.ValidationRuleBuilder ToBuilder();

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
