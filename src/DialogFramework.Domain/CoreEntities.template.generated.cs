// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 8.0.6
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#nullable enable
namespace DialogFramework.Domain
{
    public partial class ClosedQuestionOption : System.ComponentModel.INotifyPropertyChanged
    {
        private ExpressionFramework.Domain.Evaluatable? _condition;

        private string _key;

        private string _displayName;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Evaluatable? Condition
        {
            get
            {
                return _condition;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<ExpressionFramework.Domain.Evaluatable>.Default.Equals(_condition, value);
                _condition = value;
                if (hasChanged) HandlePropertyChanged(nameof(Condition));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Key
        {
            get
            {
                return _key;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.String>.Default.Equals(_key, value);
                _key = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Key));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string DisplayName
        {
            get
            {
                return _displayName;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.String>.Default.Equals(_displayName, value);
                _displayName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(DisplayName));
            }
        }

        public ClosedQuestionOption(ExpressionFramework.Domain.Evaluatable? condition, string key, string displayName)
        {
            this._condition = condition;
            this._key = key;
            this._displayName = displayName;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DialogFramework.Domain.Builders.ClosedQuestionOptionBuilder ToBuilder()
        {
            return new DialogFramework.Domain.Builders.ClosedQuestionOptionBuilder(this);
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class Dialog : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;

        private string _definitionId;

        private System.Version _definitionVersion;

        private System.Collections.ObjectModel.ObservableCollection<DialogFramework.Domain.DialogPartResult> _results;

        private object? _context;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Id
        {
            get
            {
                return _id;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.String>.Default.Equals(_id, value);
                _id = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Id));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string DefinitionId
        {
            get
            {
                return _definitionId;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.String>.Default.Equals(_definitionId, value);
                _definitionId = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(DefinitionId));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Version DefinitionVersion
        {
            get
            {
                return _definitionVersion;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.Version>.Default.Equals(_definitionVersion, value);
                _definitionVersion = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(DefinitionVersion));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DialogFramework.Domain.DialogPartResult> Results
        {
            get
            {
                return _results;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.Collections.ObjectModel.ObservableCollection<DialogFramework.Domain.DialogPartResult>>.Default.Equals(_results, value);
                _results = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Results));
            }
        }

        public object? Context
        {
            get
            {
                return _context;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.Object>.Default.Equals(_context, value);
                _context = value;
                if (hasChanged) HandlePropertyChanged(nameof(Context));
            }
        }

        public Dialog(string id, string definitionId, System.Version definitionVersion, System.Collections.Generic.IEnumerable<DialogFramework.Domain.DialogPartResult> results, object? context)
        {
            this._id = id;
            this._definitionId = definitionId;
            this._definitionVersion = definitionVersion;
            this._results = results is null ? null! : new System.Collections.ObjectModel.ObservableCollection<DialogFramework.Domain.DialogPartResult>(results);
            this._context = context;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DialogFramework.Domain.Builders.DialogBuilder ToBuilder()
        {
            return new DialogFramework.Domain.Builders.DialogBuilder(this);
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class DialogDefinition : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;

        private string _name;

        private System.Version _version;

        private System.Collections.ObjectModel.ObservableCollection<DialogFramework.Domain.DialogPartSection> _sections;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Id
        {
            get
            {
                return _id;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.String>.Default.Equals(_id, value);
                _id = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Id));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.String>.Default.Equals(_name, value);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Version Version
        {
            get
            {
                return _version;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.Version>.Default.Equals(_version, value);
                _version = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Version));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DialogFramework.Domain.DialogPartSection> Sections
        {
            get
            {
                return _sections;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.Collections.ObjectModel.ObservableCollection<DialogFramework.Domain.DialogPartSection>>.Default.Equals(_sections, value);
                _sections = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Sections));
            }
        }

        public DialogDefinition(string id, string name, System.Version version, System.Collections.Generic.IEnumerable<DialogFramework.Domain.DialogPartSection> sections)
        {
            this._id = id;
            this._name = name;
            this._version = version;
            this._sections = sections is null ? null! : new System.Collections.ObjectModel.ObservableCollection<DialogFramework.Domain.DialogPartSection>(sections);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DialogFramework.Domain.Builders.DialogDefinitionBuilder ToBuilder()
        {
            return new DialogFramework.Domain.Builders.DialogDefinitionBuilder(this);
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class DialogPartSection : System.ComponentModel.INotifyPropertyChanged
    {
        private string _id;

        private ExpressionFramework.Domain.Evaluatable? _condition;

        private string _name;

        private System.Collections.ObjectModel.ObservableCollection<DialogFramework.Domain.DialogPart> _parts;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Id
        {
            get
            {
                return _id;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.String>.Default.Equals(_id, value);
                _id = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Id));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Evaluatable? Condition
        {
            get
            {
                return _condition;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<ExpressionFramework.Domain.Evaluatable>.Default.Equals(_condition, value);
                _condition = value;
                if (hasChanged) HandlePropertyChanged(nameof(Condition));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.String>.Default.Equals(_name, value);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DialogFramework.Domain.DialogPart> Parts
        {
            get
            {
                return _parts;
            }
            private set
            {
                bool hasChanged = !EqualityComparer<System.Collections.ObjectModel.ObservableCollection<DialogFramework.Domain.DialogPart>>.Default.Equals(_parts, value);
                _parts = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Parts));
            }
        }

        public DialogPartSection(string id, ExpressionFramework.Domain.Evaluatable? condition, string name, System.Collections.Generic.IEnumerable<DialogFramework.Domain.DialogPart> parts)
        {
            this._id = id;
            this._condition = condition;
            this._name = name;
            this._parts = parts is null ? null! : new System.Collections.ObjectModel.ObservableCollection<DialogFramework.Domain.DialogPart>(parts);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DialogFramework.Domain.Builders.DialogPartSectionBuilder ToBuilder()
        {
            return new DialogFramework.Domain.Builders.DialogPartSectionBuilder(this);
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
